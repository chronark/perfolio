name: Testing

on:
  pull_request:

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: "javascript"
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          # queries: ./path/to/local/query, your-org/your-repo/queries@main

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 https://git.io/JvXDl

      # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
      #    and modify them (or add more) to build your code if your project
      #    uses a compiled language

      #- run: |
      #   make bootstrap
      #   make release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  tests:
    name: Tests
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@localhost/test
    services:
      postgres:
        image: postgres:12
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        # Make sure the database is ready before we use it
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Node
      - name: Setup Node
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 14

      # Yarn cache/install
      - name: Find yarn cache location
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.yarn-cache.outputs.dir }}
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages
        run: yarn install --frozen-lockfile

      - name: Codegen
        run: |
          yarn blitz codegen
          yarn blitz prisma generate

      # Lint Code
      - name: Lint
        run: yarn lint

      - name: Check types
        run: yarn tsc

      # Migrate DB & generate prisma client
      - name: Migrate DB & generate prisma client
        run: yarn blitz prisma db push

      - name: Run Tests
        run: yarn test
        env:
          IEX_BASE_URL: ${{ secrets.IEX_BASE_URL }}
          IEX_SANDBOX_TOKEN: ${{ secrets.IEX_SANDBOX_TOKEN}}

  wait-for-vercel:
    name: Wait for Vercel Preview
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.waitFor200.outputs.url }}
    steps:
      - name: Waiting for 200 from the Vercel Preview
        uses: patrickedqvist/wait-for-vercel-preview@master
        id: waitFor200
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          max_timeout: 600

  lhci:
    name: Lighthouse
    needs: wait-for-vercel
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        url:
          [
            "/",
            "/imprint",
            "/privacy",
            "/signin",
            "/signup",
            "/subscribe",
            "/forgot-password",
            "/reset-password",
          ]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 15.x
        uses: actions/setup-node@v1
        with:
          node-version: 15.x

      - name: run Lighthouse CI
        run: npx @lhci/cli autorun --collect.url=${{ needs.wait-for-vercel.outputs.url }}${{ matrix.url }}
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  lhci-all:
    name: lhci pass
    needs: lhci
    runs-on: ubuntu-latest
    steps:
      - run: echo Success!
