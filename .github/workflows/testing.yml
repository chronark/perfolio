name: Testing

on:
  pull_request:

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@localhost/test
    services:
      postgres:
        image: postgres:12
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        # Make sure the database is ready before we use it
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Node
      - name: Setup Node
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 14

      # Yarn cache/install
      - name: Find yarn cache location
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.yarn-cache.outputs.dir }}
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages
        run: yarn install --frozen-lockfile

      - name: Codegen
        run: |
          yarn blitz codegen
          yarn blitz prisma generate

      # Lint Code
      - name: Lint
        run: yarn lint

      - name: Check types
        run: yarn tsc

      # Migrate DB & generate prisma client
      - name: Migrate DB & generate prisma client
        run: yarn blitz prisma migrate dev

      - name: Run Tests
        run: yarn test
        env:
          IEX_BASE_URL: ${{ secrets.IEX_BASE_URL }}
          IEX_SANDBOX_TOKEN: ${{ secrets.IEX_SANDBOX_TOKEN}}

      - name: Build
        run: yarn build

  lhci:
    name: Lighthouse
    runs-on: ubuntu-latest
    strategy:
      matrix:
        url:
          [
            "http://localhost:3000/",
            "http://localhost:3000/imprint",
            "http://localhost:3000/privacy",
            "http://localhost:3000/signin",
            "http://localhost:3000/signup",
            "http://localhost:3000/subscribe",
            "http://localhost:3000/forgot-password",
            "http://localhost:3000/reset-password",
          ]
    env:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@localhost/test
    services:
      postgres:
        image: postgres:12
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        # Make sure the database is ready before we use it
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 15.x
        uses: actions/setup-node@v1
        with:
          node-version: 15.x

      # Yarn cache/install
      - name: Find yarn cache location
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.yarn-cache.outputs.dir }}
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages
        run: yarn install
      - name: Build
        run: yarn build

      - name: Push db schema
        run: yarn blitz prisma db push
        env:
          NODE_ENV: production
      - name: run Lighthouse CI
        run: npx @lhci/cli autorun --collect.url=${{ matrix.url }}
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  lhci-all:
    name: LHCI OK
    needs: lhci
    runs-on: ubuntu-latest
    steps:
      - run: echo Success!
