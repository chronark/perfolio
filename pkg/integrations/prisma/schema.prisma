datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"


}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]

}

model User {
  id String @id

  publicAddress String @unique

  settings Settings?

  notifications Notification[]

  portfolios Portfolio[]


  stripeCustomerId          String   @unique
  stripeSubscriptionId      String   @unique
  currentPaymentPeriodStart DateTime
  currentPaymentPeriodEnd   DateTime

  roles Role[]

}

model Role {
  id          String @id
  name        String @unique
  description String @unique


  users User[]

  permissions Permission[]
}

model Permission {
  id          String @id
  name        String @unique
  description String @unique

  roles Role[]

}

enum Access {
  //  Everyone has access
  PUBLIC
  //  Only the createor and shared users have access
  PRIVATE
}

model Portfolio {
  id           String        @id
  name         String
  primary      Boolean       @default(false)
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  // Public portfolios can be seen by anyone with the portfolio id
  // Private portfolios are only visible to the owner and users who were
  // granted access.
  access Access @default(PRIVATE)

  // Ids of users who have read access for this portfolio
  // grantReadAccess String[]
}

// Notifications can be displayed for a user
// Such as upcoming payments etc.
model Notification {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  readAt DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Use to create a notification which should not be displayed right away.
  visibleAfter  DateTime?
  visibleBefore DateTime?

  message String

}

model Transaction {
  id          String              @id
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  assetId     String
  asset       ExchangeTradedAsset @relation(fields: [assetId], references: [id])
  executedAt  Int
  volume      Float
  value       Float
  portfolio   Portfolio           @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId String
  // Market Identifier Code
  mic         String
}

model Settings {
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  defaultCurrency   String
  defaultExchangeId String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @unique
}

model Newsletter {
  email     String   @unique
  createdAt DateTime @default(now())
}

enum AssetType {
  MUTUAL_FUND
  COMMON_STOCK
  CRYPTO
  TODO
}

model ExchangeTradedAsset {
  id     String    @id
  isin   String    @unique
  ticker String    @unique
  figi   String    @unique
  logo   String
  type   AssetType

  //    Human readable name
  name String

  // Used by prisma
  Transaction Transaction[]
}
