datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")

}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}


model User {
  // Auth0 provided user id
  id    String @id
  email String @unique

  stripeCustomerId     String @unique
  stripeSubscriptionId String @unique

  settings UserSettings?

  notifications Notification[]

  transactions Transaction[]
}

// Notifications can be displayed for a user
// Such as upcoming payments etc.
model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  readAt DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Use to create a notification which should not be displayed right away.
  visibleAfter  DateTime?
  visibleBefore DateTime?

  message String

}

model Transaction {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  assetId    String
  executedAt Int
  volume     Float
  value      Float
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

enum Currency {
  EUR
}

model UserSettings {
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  defaultCurrency    Currency
  defaultExchangeMic String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String   @unique
}

model StockMap {
  ticker String @id
  isin   String @unique
  name   String @unique
}
