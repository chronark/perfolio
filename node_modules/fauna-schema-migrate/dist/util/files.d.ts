import { TaggedExpression } from '../types/expressions';
import { MigrationPathAndFiles } from '../types/migrations';
export declare const loadFqlSnippet: (p: string) => Promise<any>;
/**
 * Fundamentally the same as `loadJsResource` with a small tweak:
 * esbuild would output this as `<fileName>.js` which is fine, however the internal
 * filename is still `<fileName>.ts`. So we manually replace the extension before
 * continuing.
 */
export declare const loadTsResource: (p: string) => Promise<any>;
export declare const loadJsResource: (p: string) => Promise<any>;
export declare const loadFqlResource: (p: string) => Promise<any>;
export declare const loadApplicationFile: (file: string) => Promise<string>;
export declare const writeApplicationFile: (file: string, content: string) => Promise<string>;
export declare const retrieveAllResourcePaths: (atChildDbPath?: string[], ignoreChildDbs?: boolean) => Promise<string[]>;
export declare const retrieveAllResourceChildDb: (atChildDbPath?: string[]) => Promise<string[][]>;
export declare const retrieveAllResourceChildDbPaths: (fullPath: string, childDbsDirNAme: string) => Promise<string[]>;
export declare const retrieveAllMigrations: (atChildDbPath?: string[]) => Promise<string[]>;
export declare const retrieveLastMigrationVersionAndPathsForMigrationBefore: (atChildDbPath: string[], before: string | null, ignoreChildDbs?: boolean) => Promise<MigrationPathAndFiles[]>;
export declare const generateDefaultDirs: () => Promise<void>;
export declare const generateMigrationDir: () => Promise<void>;
export declare const deleteMigrationDir: () => Promise<void>;
export declare const deleteTempDir: () => Promise<void>;
export declare const arrayToApplicationPath: (filePath: string[]) => string;
export declare const writeNewMigration: (atChildDbPath: string[], migrations: TaggedExpression[], time: string) => Promise<void>;
export declare const writeNewMigrationDir: (atChildDbPath: string[], time: string) => Promise<string>;
export declare const filePathToDatabase: (childDbFolderName: string, filePath: string) => string[];
