#!/usr/bin/env node
"use strict";
// Copyright Fauna, Inc.
// SPDX-License-Identifier: MIT-0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.program = void 0;
var commander_1 = __importDefault(require("commander"));
exports.program = commander_1.default;
var ErrorWithFilePath_1 = require("./errors/ErrorWithFilePath");
var interactive_shell_1 = require("./interactive-shell/interactive-shell");
var tasks_1 = require("./tasks");
// Global configuration of the CLI
commander_1.default
    .description('Fauna schema migrations')
    .option('-l --legacy', 'set this option or the FAUNA_LEGACY environment var to disable fancy output for legacy terminals or allow easy copying of text')
    .option('-n --no-print', 'set this option or the FAUNA_NOPRINT to omit printing of the FQL transactions which could be big')
    .option('-c --child-db <name>', 'set this option or the FAUNA_CHILD_DB environment var to run the schema migrations in a child db which allows for faster recreation, avoiding the 60s schema cache')
    .option('-k --key <key>', 'set this option or the FAUNA_ADMIN_KEY environment to pass the fauna admin secret, be careful that your keys do not end up in server/CI logs, use FAUNA_ADMIN_KEY if you are not sure!')
    .parse(process.argv);
// Configure all tasks to directly work with commander
var options = commander_1.default.opts();
if (options.key)
    process.env.FAUNA_ADMIN_KEY = options.key;
if (options.childDb)
    process.env.FAUNA_CHILD_DB = options.childDb;
if (options.legacy)
    process.env.FAUNA_LEGACY = options.legacy;
if (options.noPrint)
    process.env.FAUNA_NOPRINT = options.noPrint;
var actionErrorHandler = function (error) {
    if (error instanceof ErrorWithFilePath_1.ErrorWithFilePath) {
        console.error('\nError in file: ' + error.filePath);
    }
    console.error(error.message
        .split('\n')
        .map(function (e) { return ' '.repeat(2) + e; })
        .join('\n'));
    console.error('Stacktrace ' + error.stack);
    process.exitCode = 1;
    process.exit();
};
tasks_1.tasks.forEach(function (task) {
    commander_1.default
        .command("" + task.name + (task.options ? ' ' + task.options : ''))
        .description(task.description)
        .action(function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return __awaiter(void 0, void 0, void 0, function () {
            var err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, tasks_1.runTask.apply(void 0, __spreadArray([task, task.name === 'run'], params))];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        err_1 = _a.sent();
                        actionErrorHandler(err_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    });
});
// On unknown command, show the user some help
commander_1.default.on('command:*', function (operands) {
    interactive_shell_1.interactiveShell.start(false);
    interactive_shell_1.interactiveShell.reportWarning("Unknown command '" + operands[0] + "'");
    interactive_shell_1.interactiveShell.printBoxedInfo(commander_1.default.helpInformation());
    interactive_shell_1.interactiveShell.close();
    process.exitCode = 1;
});
if (process.argv.length === 2) {
    console.info(commander_1.default.helpInformation());
    process.exitCode = 1;
}
else {
    commander_1.default.parse(process.argv);
}
