"use strict";
/* eslint-disable */
// Copyright Fauna, Inc.
// SPDX-License-Identifier: MIT-0
Object.defineProperty(exports, "__esModule", { value: true });
exports.evalFQLCode = void 0;
var faunadb_1 = require("faunadb");
var EvalFqlError_1 = require("../errors/EvalFqlError");
function evalFQLCode(code) {
    return baseEvalFQL(code, faunadb_1.query);
}
exports.evalFQLCode = evalFQLCode;
function baseEvalFQL(fql, q) {
    var Ref = q.Ref, Bytes = q.Bytes, Abort = q.Abort, At = q.At, Let = q.Let, Var = q.Var, If = q.If, Do = q.Do, Object = q.Object, Lambda = q.Lambda, Call = q.Call, Query = q.Query, Map = q.Map, Foreach = q.Foreach, Filter = q.Filter, Take = q.Take, Drop = q.Drop, Prepend = q.Prepend, Append = q.Append, IsEmpty = q.IsEmpty, IsNonEmpty = q.IsNonEmpty, Get = q.Get, KeyFromSecret = q.KeyFromSecret, Paginate = q.Paginate, Exists = q.Exists, Create = q.Create, Update = q.Update, Replace = q.Replace, Delete = q.Delete, Insert = q.Insert, Remove = q.Remove, CreateClass = q.CreateClass, CreateCollection = q.CreateCollection, CreateDatabase = q.CreateDatabase, CreateIndex = q.CreateIndex, CreateKey = q.CreateKey, CreateFunction = q.CreateFunction, CreateRole = q.CreateRole, Singleton = q.Singleton, Events = q.Events, Match = q.Match, Union = q.Union, Intersection = q.Intersection, Difference = q.Difference, Distinct = q.Distinct, Join = q.Join, Login = q.Login, Logout = q.Logout, Identify = q.Identify, Identity = q.Identity, HasIdentity = q.HasIdentity, Concat = q.Concat, Casefold = q.Casefold, FindStr = q.FindStr, FindStrRegex = q.FindStrRegex, Length = q.Length, LowerCase = q.LowerCase, LTrim = q.LTrim, NGram = q.NGram, Repeat = q.Repeat, ReplaceStr = q.ReplaceStr, ReplaceStrRegex = q.ReplaceStrRegex, RTrim = q.RTrim, Space = q.Space, SubString = q.SubString, TitleCase = q.TitleCase, Trim = q.Trim, UpperCase = q.UpperCase, Time = q.Time, Epoch = q.Epoch, Date = q.Date, NextId = q.NextId, NewId = q.NewId, Database = q.Database, Index = q.Index, Class = q.Class, Collection = q.Collection, Function = q.Function, Role = q.Role, Classes = q.Classes, Collections = q.Collections, Databases = q.Databases, Indexes = q.Indexes, Functions = q.Functions, Roles = q.Roles, Keys = q.Keys, Tokens = q.Tokens, Credentials = q.Credentials, Equals = q.Equals, Contains = q.Contains, Select = q.Select, SelectAll = q.SelectAll, Abs = q.Abs, Add = q.Add, BitAnd = q.BitAnd, BitNot = q.BitNot, BitOr = q.BitOr, BitXor = q.BitXor, Ceil = q.Ceil, Divide = q.Divide, Floor = q.Floor, Max = q.Max, Min = q.Min, Modulo = q.Modulo, Multiply = q.Multiply, Round = q.Round, Subtract = q.Subtract, Sign = q.Sign, Sqrt = q.Sqrt, Trunc = q.Trunc, Acos = q.Acos, Asin = q.Asin, Atan = q.Atan, Cos = q.Cos, Cosh = q.Cosh, Degrees = q.Degrees, Exp = q.Exp, Hypot = q.Hypot, Ln = q.Ln, Log = q.Log, Pow = q.Pow, Radians = q.Radians, Sin = q.Sin, Sinh = q.Sinh, Tan = q.Tan, Tanh = q.Tanh, LT = q.LT, LTE = q.LTE, GT = q.GT, GTE = q.GTE, And = q.And, Or = q.Or, Not = q.Not, ToString = q.ToString, ToNumber = q.ToNumber, ToTime = q.ToTime, ToSeconds = q.ToSeconds, ToMicros = q.ToMicros, ToMillis = q.ToMillis, DayOfMonth = q.DayOfMonth, DayOfWeek = q.DayOfWeek, DayOfYear = q.DayOfYear, Second = q.Second, Minute = q.Minute, Hour = q.Hour, Month = q.Month, Year = q.Year, ToDate = q.ToDate, Format = q.Format, Merge = q.Merge, Range = q.Range, Reduce = q.Reduce, MoveDatabase = q.MoveDatabase, wrap = q.wrap, Count = q.Count, Mean = q.Mean, Sum = q.Sum, StartsWith = q.StartsWith, EndsWith = q.EndsWith, ContainsStr = q.ContainsStr, ContainsStrRegex = q.ContainsStrRegex, RegexEscape = q.RegexEscape, Now = q.Now, ToDouble = q.ToDouble, ToInteger = q.ToInteger, ToObject = q.ToObject, ToArray = q.ToArray, Any = q.Any, All = q.All, TimeAdd = q.TimeAdd, TimeSubtract = q.TimeSubtract, TimeDiff = q.TimeDiff, IsNumber = q.IsNumber, IsDouble = q.IsDouble, IsInteger = q.IsInteger, IsBoolean = q.IsBoolean, IsNull = q.IsNull, IsBytes = q.IsBytes, IsTimestamp = q.IsTimestamp, IsDate = q.IsDate, IsString = q.IsString, IsArray = q.IsArray, IsObject = q.IsObject, IsRef = q.IsRef, IsSet = q.IsSet, IsDoc = q.IsDoc, IsLambda = q.IsLambda, IsCollection = q.IsCollection, IsDatabase = q.IsDatabase, IsIndex = q.IsIndex, IsFunction = q.IsFunction, IsKey = q.IsKey, IsToken = q.IsToken, IsCredentials = q.IsCredentials, IsRole = q.IsRole, Documents = q.Documents, Reverse = q.Reverse, ContainsPath = q.ContainsPath, ContainsField = q.ContainsField, ContainsValue = q.ContainsValue, CreateAccessProvider = q.CreateAccessProvider, AccessProvider = q.AccessProvider, AccessProviders = q.AccessProviders, CurrentIdentity = q.CurrentIdentity, HasCurrentIdentity = q.HasCurrentIdentity, CurrentToken = q.CurrentToken, HasCurrentToken = q.HasCurrentToken;
    // eslint-disable-next-line
    try {
        return fql.match(/^\s*{(.*\n*)*}\s*$/) ? eval("(" + fql + ")") : eval(fql);
    }
    catch (err) {
        if (err instanceof SyntaxError) {
            throw new EvalFqlError_1.EvalFqlError(err, fql);
        }
        throw err;
    }
}
