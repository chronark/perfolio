generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String?
  email          String    @unique
  hashedPassword String?
  role           String    @default("USER")
  sessions       Session[]
  tokens         Token[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             String?
  user               User?     @relation(fields: [userId], references: [id])
}

model Token {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  userId      String
  user        User      @relation(fields: [userId], references: [id])

  @@unique([hashedToken, type])
}

model Company {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ticker of the company
  symbol         Symbol  @relation(fields: [symbolId], references: [symbol])
  symbolId       String  @unique
  // Logo of the company
  logo           String
  name           String?
  exchange       String?
  industry       String?
  website        String?
  description    String?
  ceo            String?
  issueType      String?
  sector         String?
  employees      Int?
  securityName   String?
  primarySicCode Int?
  address        String?
  address2       String?
  state          String?
  city           String?
  zip            String?
  country        String?
  phone          String?
}

model Transaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  assetId   String
  volume    Float

  value      Float
  currency   Currency @default(USD)
  // When the trade was executed as unix timestamp with second precision
  executedAt Int
}

model Price {
  id        String   @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  symbol    String
  time      Int
  value     Float
  currency  Currency @default(USD)

  @@unique([symbol, time, currency])
}

enum TokenType {
  RESET_PASSWORD
}

enum Currency {
  USD
}

model Exchange {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Market Identifier Code using ISO 10383
  mic String @id

  // Human readable name
  name String

  VolumeBySymbol VolumeTraded[]
}

model Symbol {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  symbol    String   @unique
  isin      String?

  company          Company?
  volumeByExchange VolumeTraded[]
}

// How much of a given symbol was traded at a given exchange.
model VolumeTraded {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  symbol   Symbol   @relation(fields: [symbolId], references: [symbol])
  exchange Exchange @relation(fields: [exchangeId], references: [mic])
  date     Int?

  volume Int


  exchangeId String
  symbolId   String
  @@unique([symbolId, exchangeId])
}
